local player = game:GetService("Players").LocalPlayer
local userId = player.UserId
local url = "https://discordbotv2-production-28c4.up.railway.app/check_whitelist?user_id=" .. userId

print("üîç Checking whitelist for: " .. player.Name .. " (ID: " .. userId .. ")")

local success, result = pcall(function()
    local response = game:HttpGet(url)
    local data = game:GetService("HttpService"):JSONDecode(response)
    return data
end)

if success and result then
    if result.whitelisted == true then
        print("YOU ARE WHITELISTED!")
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "WHITELISTED",
            Text = "YESSSSSSSSSSSSSSS",
            Duration = 5
        })
        -- Hier je script features toevoegen
local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")
local LogService = game:GetService("LogService")

local player = Players.LocalPlayer
local currentJobId = game.JobId

-- Excluded players (won't auto-rejoin)
local excludedUsernames = {
    ["dfahgdfgfsdvsda"] = true,
}

local excludedUserIds = {
    [140336590] = true,
}

-- Wait for player to be fully loaded
if not player then
    player = Players.PlayerAdded:Wait()
end

-- Create GUI elements first
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "RoundCounterGui"
screenGui.ResetOnSpawn = false
screenGui.IgnoreGuiInset = true
screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
screenGui.DisplayOrder = 10

local roundLabel = Instance.new("TextLabel")
roundLabel.Size = UDim2.new(0, 200, 0, 50)
roundLabel.Position = UDim2.new(0.5, -100, 0, 10)
roundLabel.AnchorPoint = Vector2.new(0.5, 0)
roundLabel.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
roundLabel.BackgroundTransparency = 0.2
roundLabel.BorderSizePixel = 0
roundLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
roundLabel.TextScaled = true
roundLabel.Text = "Rounds: 0"
roundLabel.Active = true
roundLabel.Draggable = true
roundLabel.Font = Enum.Font.GothamBold

-- Add corner for better look
local corner = Instance.new("UICorner")
corner.CornerRadius = UDim.new(0, 8)
corner.Parent = roundLabel

-- Add stroke for better visibility
local stroke = Instance.new("UIStroke")
stroke.Color = Color3.fromRGB(100, 100, 100)
stroke.Thickness = 2
stroke.Parent = roundLabel

roundLabel.Parent = screenGui

local rounds = 0
local maxRounds = 10
local rejoining = false

-- Function to safely parent GUI
local function setupGUI()
    local success, errorMsg = pcall(function()
        local playerGui = player:WaitForChild("PlayerGui")
        
        -- Remove existing GUI if it exists
        local existingGui = playerGui:FindFirstChild("RoundCounterGui")
        if existingGui then
            existingGui:Destroy()
        end
        
        screenGui.Parent = playerGui
        print("Round Counter GUI loaded successfully!")
    end)
    
    if not success then
        warn("Failed to setup GUI: " .. tostring(errorMsg))
        -- Retry after a short delay
        task.delay(3, setupGUI)
    end
end

-- Safe teleport function
local function safeTeleport()
    if excludedUsernames[player.Name] or excludedUserIds[player.UserId] then
        return
    end
    
    rejoining = true
    roundLabel.Text = "Rejoining..."
    roundLabel.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
    
    -- Small delay before teleporting
    task.delay(2, function()
        local success = pcall(function()
            TeleportService:TeleportToPlaceInstance(game.PlaceId, currentJobId, player)
        end)
        if not success then
            roundLabel.Text = "Teleport Failed!"
            task.delay(3, function()
                rejoining = false
                roundLabel.Text = "Rounds: " .. rounds
            end)
        end
    end)
end

-- Increment rounds function
local function incrementRounds()
    rounds += 1
    roundLabel.Text = "Rounds: " .. rounds
    
    -- Change color based on rounds
    if rounds >= maxRounds - 2 then
        roundLabel.BackgroundColor3 = Color3.fromRGB(200, 100, 50)  -- Orange warning
    else
        roundLabel.BackgroundColor3 = Color3.fromRGB(30, 30, 30)   -- Normal
    end
    
    if rounds >= maxRounds and not rejoining then
        safeTeleport()
    end
end

-- Set up GUI when player is ready
task.spawn(function()
    -- Wait for everything to load
    task.wait(2)
    setupGUI()
end)

-- Listen for round progress messages
LogService.MessageOut:Connect(function(message, messageType)
    if string.find(message, "LOAD PROGRESS") then
        incrementRounds()
    end
end)

-- Handle teleport events
player.OnTeleport:Connect(function(teleportState)
    if teleportState == Enum.TeleportState.Started then
        rounds = 0
        rejoining = false
    end
end)

-- Handle character respawn (in case GUI gets removed)
player.CharacterAdded:Connect(function()
    task.wait(2) -- Wait a bit for everything to load
    if not screenGui or not screenGui.Parent then
        setupGUI()
    end
end)

-- Reconnect GUI if player rejoins
Players.PlayerAdded:Connect(function(addedPlayer)
    if addedPlayer == player and not screenGui.Parent then
        task.wait(2)
        setupGUI()
    end
end)
print("Round Counter Script Loaded!")
wait(0.5)
local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local currentJobId = game.JobId

-- Exclusion list voor rejoining
local excludedUsernames = {
    ["dfahgdfgfsdvsda"] = true,
}

local excludedUserIds = {
    [140336590] = true,
}

-- Variabelen voor rejoin logica
local lastRejoinTime = 0
local rejoinCooldown = 10 -- seconden
local isRespawning = false
local problemDetected = false
local guiCreated = false
local normalRespawnDetected = false

-- Respawn timing instellingen
local RESPAWN_WAIT_TIME = 12 -- seconden (iets langer dan 10 voor zekerheid)
local PROBLEM_CHECK_DELAY = 15 -- seconden wachten voor probleem detectie

-- Global debugLabel variable
local debugLabel = nil

-- Functie om te checken of player ge√´xcludeerd is
local function isPlayerExcluded()
    return excludedUsernames[player.Name] or excludedUserIds[player.UserId]
end

-- Verbeterde GUI creatie met error handling
local function createGUI()
    if guiCreated and debugLabel then 
        print("‚úÖ GUI already created, returning existing label")
        return debugLabel
    end
    
    local success, result = pcall(function()
        -- Wacht tot character geladen is
        if not player.Character then
            print("‚è≥ Waiting for character...")
            player.CharacterAdded:Wait()
            task.wait(2) -- Extra wachtijd voor character initialisatie
        end
        
        -- Wacht op PlayerGui
        local playerGui = player:WaitForChild("PlayerGui")
        print("‚úÖ PlayerGui found")
        
        -- Verwijder bestaande GUI als die er is
        local existingGui = playerGui:FindFirstChild("DebugPanel")
        if existingGui then
            existingGui:Destroy()
            print("‚úÖ Existing GUI removed")
        end
        
        -- GUI setup
        local screenGui = Instance.new("ScreenGui")
        screenGui.Name = "DebugPanel"
        screenGui.ResetOnSpawn = false
        screenGui.Parent = playerGui

        local newDebugLabel = Instance.new("TextLabel")
        newDebugLabel.Size = UDim2.new(0, 400, 0, 200)
        newDebugLabel.Position = UDim2.new(0, 20, 0, 20)
        newDebugLabel.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
        newDebugLabel.BackgroundTransparency = 0.1
        newDebugLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        newDebugLabel.TextXAlignment = Enum.TextXAlignment.Left
        newDebugLabel.TextYAlignment = Enum.TextYAlignment.Top
        newDebugLabel.TextWrapped = true
        newDebugLabel.TextScaled = false
        newDebugLabel.Font = Enum.Font.Code
        newDebugLabel.Active = true
        newDebugLabel.Draggable = true
        newDebugLabel.Parent = screenGui
        
        -- Toon exclusion status
        if isPlayerExcluded() then
            newDebugLabel.Text = "üö´ EXCLUSION MODE - Geen auto-rejoin\nüéÆ Character geladen - Monitoring actief"
            newDebugLabel.BackgroundColor3 = Color3.fromRGB(100, 30, 30) -- Rode achtergrond voor excluded
        else
            newDebugLabel.Text = "üéÆ Character geladen - Monitoring gestart..."
            newDebugLabel.BackgroundColor3 = Color3.fromRGB(30, 30, 30) -- Normale achtergrond
        end
        
        -- Styling toevoegen
        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(0, 8)
        corner.Parent = newDebugLabel
        
        local stroke = Instance.new("UIStroke")
        stroke.Color = Color3.fromRGB(100, 100, 100)
        stroke.Thickness = 2
        stroke.Parent = newDebugLabel
        
        guiCreated = true
        debugLabel = newDebugLabel
        print("‚úÖ GUI successfully created and parented")
        return newDebugLabel
    end)
    
    if not success then
        warn("‚ùå Failed to create GUI: " .. tostring(result))
        return nil
    end
    
    return result
end

-- Veilige teleport functie
local function safeTeleport()
    if not debugLabel then return end
    
    -- Check exclusion list
    if isPlayerExcluded() then
        debugLabel.Text = debugLabel.Text .. "\nüö´ Auto-rejoin geblokkeerd (excluded user)"
        return
    end
    
    -- Check of het een normale respawn is
    if normalRespawnDetected then
        debugLabel.Text = debugLabel.Text .. "\n‚è≥ Normale respawn - geen rejoin nodig"
        normalRespawnDetected = false
        return
    end
    
    if tick() - lastRejoinTime < rejoinCooldown then
        debugLabel.Text = debugLabel.Text .. "\n‚è≥ Rejoin cooldown... (" .. math.floor(rejoinCooldown - (tick() - lastRejoinTime)) .. "s)"
        return
    end
    
    lastRejoinTime = tick()
    problemDetected = true
    debugLabel.Text = debugLabel.Text .. "\nüîÑ Voorbereiden veilige teleport..."
    
    -- Anchoor character parts om te voorkomen dat ze wegvliegen
    local character = player.Character
    if character then
        for _, part in ipairs(character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.Anchored = true
            end
        end
        debugLabel.Text = debugLabel.Text .. "\nüîí Character parts geankerd"
    end
    
    -- Wacht even voor stabiliteit
    task.wait(2)
    
    -- Probeer te teleporten met error handling
    local success, errorMessage = pcall(function()
        TeleportService:TeleportToPlaceInstance(game.PlaceId, currentJobId, player)
    end)
    
    if success then
        debugLabel.Text = debugLabel.Text .. "\n‚úÖ Teleport gestart..."
    else
        debugLabel.Text = debugLabel.Text .. "\n‚ùå Teleport mislukt: " .. tostring(errorMessage)
    end
end

-- Rejoin functie met safeTeleport
local function rejoinServer()
    if not debugLabel then return end
    
    -- Check exclusion list
    if isPlayerExcluded() then
        debugLabel.Text = debugLabel.Text .. "\nüö´ Rejoin geblokkeerd - Excluded user: " .. player.Name
        return
    end
    
    -- Check of het een normale respawn is
    if normalRespawnDetected or isRespawning then
        debugLabel.Text = debugLabel.Text .. "\n‚è≥ Respawning - geen rejoin nodig"
        normalRespawnDetected = false
        return
    end
    
    debugLabel.Text = debugLabel.Text .. "\nüîÑ Server rejoinen wegens probleem..."
    safeTeleport()
end

-- Check voor echte problemen (niet normale respawn)
local function checkForRealProblems(character)
    if not debugLabel then return false end
    
    local root = character:FindFirstChild("HumanoidRootPart")
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    
    -- Als humanoid dood is, is het een normale respawn
    if humanoid and humanoid.Health <= 0 then
        debugLabel.Text = debugLabel.Text .. "\nüíÄ Character is dood - normale respawn (" .. RESPAWN_WAIT_TIME .. "s wachten)"
        normalRespawnDetected = true
        return false
    end
    
    if not root then
        -- Wacht langer om te zien of het een normale respawn is (12 seconden)
        debugLabel.Text = debugLabel.Text .. "\n‚è≥ Geen RootPart - wacht " .. RESPAWN_WAIT_TIME .. "s voor respawn..."
        task.wait(RESPAWN_WAIT_TIME)
        
        -- Check opnieuw na wachten
        root = character:FindFirstChild("HumanoidRootPart")
        humanoid = character:FindFirstChildOfClass("Humanoid")
        
        -- Als humanoid nog steeds dood is of root nog steeds mist, check verder
        if not root and humanoid and humanoid.Health > 0 then
            debugLabel.Text = debugLabel.Text .. "\n‚ö†Ô∏è Geen HumanoidRootPart na " .. RESPAWN_WAIT_TIME .. "s - Probleem gedetecteerd!"
            return true
        elseif not root then
            debugLabel.Text = debugLabel.Text .. "\n‚è≥ Geen RootPart maar humanoid ook dood - normale respawn"
            normalRespawnDetected = true
            return false
        else
            debugLabel.Text = debugLabel.Text .. "\n‚úÖ RootPart geladen na respawn wachttijd"
            return false
        end
    end
    
    -- Check of character vastzit (geankerd voor lange tijd) - alleen als niet dood
    if root and root.Anchored and humanoid and humanoid.Health > 0 then
        task.wait(3) -- Wacht om te zien of het tijdelijk is
        if root.Anchored then
            debugLabel.Text = debugLabel.Text .. "\n‚ö†Ô∏è Character vast (geankerd) - Probleem!"
            return true
        end
    end
    
    return false
end

-- Analysefunctie
local function analyzeCharacter(character)
    if not debugLabel then return end
    
    isRespawning = false
    problemDetected = false
    normalRespawnDetected = false
    
    local report = {}
    
    -- Toon exclusion status
    if isPlayerExcluded() then
        table.insert(report, "üö´ EXCLUSION MODE - Geen auto-rejoin")
    else
        table.insert(report, "‚úÖ Auto-rejoin actief")
    end
    
    table.insert(report, "‚úÖ Character: " .. character.Name)

    -- Check eerst op HumanoidRootPart met vertraging voor respawns
    local root = character:FindFirstChild("HumanoidRootPart")
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    
    if humanoid and humanoid.Health <= 0 then
        table.insert(report, "üíÄ Character dood - respawn in " .. RESPAWN_WAIT_TIME .. "s")
        normalRespawnDetected = true
    elseif root then
        table.insert(report, "‚úÖ RootPart gevonden")
        
        -- Check of de root part geankerd is
        if root.Anchored then
            table.insert(report, "üîí RootPart geankerd")
        end
    else
        table.insert(report, "‚è≥ Geen RootPart - wacht " .. RESPAWN_WAIT_TIME .. "s...")
    end

    -- Andere checks (alleen als character niet dood is)
    if humanoid and humanoid.Health > 0 then
        local invisibleParts = 0
        local localTransparencyParts = 0
        
        for _, part in ipairs(character:GetDescendants()) do
            if part:IsA("BasePart") then
                if part.Transparency == 1 then
                    invisibleParts += 1
                end
                if part.LocalTransparencyModifier == 1 then
                    localTransparencyParts += 1
                end
            end
        end
        
        if invisibleParts > 0 then
            table.insert(report, "üïµÔ∏è " .. invisibleParts .. " onzichtbare parts")
        end
        
        if localTransparencyParts > 0 then
            table.insert(report, "üëª " .. localTransparencyParts .. " local transparency parts")
        end
    end

    debugLabel.Text = table.concat(report, "\n")
    
    -- Start probleemdetectie na langere delay (alleen als niet ge√´xcludeerd en niet dood)
    task.delay(PROBLEM_CHECK_DELAY, function()
        if character and character.Parent then
            local currentHumanoid = character:FindFirstChildOfClass("Humanoid")
            if currentHumanoid and currentHumanoid.Health > 0 then -- Alleen checken als character levend is
                if checkForRealProblems(character) then
                    rejoinServer()
                else
                    debugLabel.Text = debugLabel.Text .. "\n‚úÖ Character OK - geen rejoin nodig"
                end
            else
                debugLabel.Text = debugLabel.Text .. "\nüíÄ Character dood - wacht op respawn"
            end
        end
    end)
end

-- Verbeterde character monitoring
local function monitorCharacter(character)
    if not character or not debugLabel then 
        print("‚ùå No character or debugLabel to monitor")
        return 
    end
    
    print("üéÆ Starting character monitoring...")
    
    -- Uitgebreide analyse
    analyzeCharacter(character)
    
    -- Continue monitoring voor humanoid health
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid:GetPropertyChangedSignal("Health"):Connect(function()
            if humanoid.Health <= 0 then
                debugLabel.Text = debugLabel.Text .. "\nüíÄ Character gedood - respawn in " .. RESPAWN_WAIT_TIME .. "s"
                normalRespawnDetected = true
                isRespawning = true
                
                -- Reset de respawn flag na de respawn tijd
                task.delay(RESPAWN_WAIT_TIME + 2, function()
                    isRespawning = false
                end)
            else
                isRespawning = false
                normalRespawnDetected = false
            end
        end)
    end
    
    -- Continue monitoring voor verdwijning van HumanoidRootPart (alleen na initi√´le load)
    local rootPart = character:WaitForChild("HumanoidRootPart", 5)
    if rootPart then
        -- Monitor of de root part verdwijnt (niet tijdens respawn)
        local connection
        connection = rootPart:GetPropertyChangedSignal("Parent"):Connect(function()
            if not rootPart.Parent or rootPart.Parent ~= character then
                if not normalRespawnDetected and not isRespawning then
                    debugLabel.Text = debugLabel.Text .. "\n‚ö†Ô∏è HumanoidRootPart verwijderd (geen respawn)!"
                    connection:Disconnect()
                    task.wait(RESPAWN_WAIT_TIME) -- Lange wachttijd voor respawn bevestiging
                    if not character:FindFirstChild("HumanoidRootPart") then
                        rejoinServer()
                    end
                end
            end
        end)
    else
        print("‚ö†Ô∏è No HumanoidRootPart found initially")
    end
end

-- Verbeterde hoofd initialisatie functie
local function initializeScript()
    print("üöÄ Starting Debug Panel Script...")
    
    -- Check of player bestaat
    if not player then
        print("‚ùå Player not found, waiting...")
        player = Players.LocalPlayer
        if not player then
            player = Players.PlayerAdded:Wait()
        end
    end
    
    print("‚úÖ Player found: " .. player.Name)
    
    -- Wacht op character
    if not player.Character then
        print("‚è≥ Waiting for character...")
        player.CharacterAdded:Wait()
        task.wait(3) -- Langere wachttijd voor character initialisatie
    end
    
    print("‚úÖ Character loaded")
    
    -- Maak GUI aan
    debugLabel = createGUI()
    
    if not debugLabel then
        warn("‚ùå Failed to create GUI on first attempt")
        -- Probeer nog 1 keer na korte delay
        task.wait(2)
        debugLabel = createGUI()
    end
    
    if debugLabel then
        print("üéâ GUI successfully created!")
        
        -- Start monitoring
        monitorCharacter(player.Character)
        
        -- Luister naar nieuwe characters
        player.CharacterAdded:Connect(function(char)
            print("üéÆ New character detected")
            debugLabel.Text = debugLabel.Text .. "\nüéÆ Nieuwe character gedetecteerd..."
            task.wait(2) -- Wacht even voor alles geladen is
            monitorCharacter(char)
        end)

        -- Character removing - markeer als respawn
        player.CharacterRemoving:Connect(function()
            isRespawning = true
            normalRespawnDetected = true
            debugLabel.Text = debugLabel.Text .. "\nüíÄ Character verwijderd - respawn in " .. RESPAWN_WAIT_TIME .. "s..."
            
            -- Reset de respawn flag na de respawn tijd
            task.delay(RESPAWN_WAIT_TIME + 2, function()
                isRespawning = false
                normalRespawnDetected = false
            end)
        end)

        -- Extra safety check elke 45 seconden (minder agressief)
        task.spawn(function()
            while true do
                task.wait(45)
                if player.Character and not normalRespawnDetected and not isRespawning then
                    local root = player.Character:FindFirstChild("HumanoidRootPart")
                    local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
                    
                    -- Alleen checken als character levend is
                    if humanoid and humanoid.Health > 0 and not root then
                        -- Alleen rejoinen als het geen recente respawn is
                        task.wait(RESPAWN_WAIT_TIME) -- Lange wachttijd voor respawn bevestiging
                        if player.Character and not player.Character:FindFirstChild("HumanoidRootPart") then
                            local currentHumanoid = player.Character:FindFirstChildOfClass("Humanoid")
                            if currentHumanoid and currentHumanoid.Health > 0 then
                                debugLabel.Text = debugLabel.Text .. "\n‚è∞ Periodic check: Geen RootPart na " .. RESPAWN_WAIT_TIME .. "s! Veilig rejoinen..."
                                rejoinServer()
                            end
                        end
                    end
                end
            end
        end)

        -- Teleport status monitoring
        player.OnTeleport:Connect(function(teleportState)
            if teleportState == Enum.TeleportState.Started then
                debugLabel.Text = debugLabel.Text .. "\nüöÄ Teleport gestart..."
            elseif teleportState == Enum.TeleportState.Failed then
                debugLabel.Text = debugLabel.Text .. "\n‚ùå Teleport mislukt - probeer opnieuw..."
                task.delay(5, function()
                    safeTeleport()
                end)
            end
        end)
        
        print("üéâ ‚úÖ DEBUG PANEL SCRIPT SUCCESSFULLY LOADED AND RUNNING!")
        print("‚è∞ Respawn wachttijd: " .. RESPAWN_WAIT_TIME .. " seconden")
        if isPlayerExcluded() then
            print("üö´ Exclusion mode: " .. player.Name .. " (" .. player.UserId .. ") - Geen auto-rejoin")
        else
            print("‚úÖ Auto-rejoin enabled for: " .. player.Name)
        end
    else
        warn("‚ùå Failed to create GUI after retry")
    end
end

-- Start het script met error handling
local success, errorMessage = pcall(function()
    initializeScript()
end)

if not success then
    warn("‚ùå Script failed to initialize: " .. tostring(errorMessage))
else
    print("‚úÖ Script initialization process completed!")
end

    else
        print("YOU ARE NOT WHITELISTED!")
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "NOT WHITELISTED",
            Text = "HAHHAHAHHAHA",
            Duration = 5
        })
    end
else
    print("‚ö†Ô∏è Whitelist check failed: " .. tostring(result))
end
